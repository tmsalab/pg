[{"path":"https://tmsalab.github.io/pg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Balamuta. Author, maintainer, copyright holder.","code":""},{"path":"https://tmsalab.github.io/pg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Balamuta, J. J. (2021). Bayesian estimation restricted latent class models: Extending priors, link functions, structural models. University Illinois Urbana-Champaign. Polson, N. G., Scott J. G., Windle, J. (2013) Bayesian inference logistic models using Polya-Gamma latent variables. URL <https://arxiv.org/abs/1205.0310>.","code":"@PhdThesis{,   title = {Bayesian estimation of restricted latent class models: Extending priors, link functions, and structural models},   author = {James Joseph Balamuta},   school = {University of Illinois Urbana-Champaign},   doi = {10.1080/00273171.2021.1985949},   year = {2021}, } @Unpublished{,   title = {Bayesian inference for logistic models using Polya-Gamma latent variables},   author = {Nicholas G. Polson and James G. Scott and Jesse Windle},   year = {2013},   url = {https://arxiv.org/abs/1205.0310},   note = {Most recent version: Jul. 2013.}, }"},{"path":"https://tmsalab.github.io/pg/index.html","id":"pg","dir":"","previous_headings":"","what":"Pólya-Gamma Distribution Sampler","title":"Pólya-Gamma Distribution Sampler","text":"goal pg provide R C++ header access Pólya-Gamma distribution sampling routine.","code":""},{"path":"https://tmsalab.github.io/pg/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Pólya-Gamma Distribution Sampler","text":"can install development version pg GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"tmsalab/pg\")"},{"path":"https://tmsalab.github.io/pg/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Pólya-Gamma Distribution Sampler","text":"Let X Pólya-Gamma Distribution denoted PG(h, z), h “shape” parameter z “scale” parameter. Presently, following sampling cases enabled: h > 170: Normal approximation method h <= 170 h > 13: Saddlepoint method h = 1 h = 2: Devroye method h > 0: Sum gammas method. h < 0: Result automatically set zero. implemented: h <= 13 h > 1: Alternative method (waiting verification) package structure allows sampling routines accessed either via C++ R. return type can either single value vector. repeat sampling needed b c, please use vectorized sampler.","code":""},{"path":"https://tmsalab.github.io/pg/index.html","id":"sampling-with-c","dir":"","previous_headings":"Usage","what":"Sampling with C++","title":"Pólya-Gamma Distribution Sampler","text":"Using sampling routine C++ standalone .cpp file requires either rpg_scalar_hybrid(), rpg_vector_hybrid(), rpg_hybrid() function accessed pg C++ namespace. functions automatically select appropriate algorithm based criteria discussed previously. use within R package, include pg package name DESCRIPTION file. , include pg.h header similar manner stand-alone C++ example.","code":"#include <pg.h> // [[Rcpp::depends(RcppArmadillo, pg)]]  // [[Rcpp::export]] double rpg_scalar(const double h, const double z) {   return pg::rpg_scalar_hybrid(h, z); }  // [[Rcpp::export]] arma::vec rpg_hybrid(const arma::vec& h, const arma::vec& z) {   return pg::rpg_hybrid(h, z); }  // [[Rcpp::export]] arma::vec rpg_vector(unsigned int n, const double h, const double z) {   return pg::rpg_vector_hybrid(n, h, z); } LinkingTo:      Rcpp,     RcppArmadillo     pg"},{"path":"https://tmsalab.github.io/pg/index.html","id":"sampling-with-r","dir":"","previous_headings":"Usage","what":"Sampling with R","title":"Pólya-Gamma Distribution Sampler","text":"use within R file, can :","code":"# Number of observations to sample n = 4 # Select the PG(h, z) values h = 1; z = 0.5  # Set a seed for reproducibility set.seed(141)  # Sample a single observation pg::rpg_scalar(h, z) #> [1] 0.05752942  # Set a seed for reproducibility set.seed(141)  # Sample a vector of observations pg::rpg_vector(n, h, z) #>            [,1] #> [1,] 0.05752942 #> [2,] 0.38752679 #> [3,] 0.38710433 #> [4,] 0.18847913"},{"path":"https://tmsalab.github.io/pg/index.html","id":"see-also","dir":"","previous_headings":"","what":"See also","title":"Pólya-Gamma Distribution Sampler","text":"following useful resources regarding Pólya-Gamma distribution. “Bayesian Inference Logistic Models Using Pólya–Gamma Latent Variables” Nicholas G. Polson, James G. Scott, Jesse Windle (2013) doi:10.1080/01621459.2013.829001. Paper invented Pólya-Gamma “Sampling Pólya-Gamma random variates: alternate approximate techniques” Jesse Windle, Nicholas G. Polson, James G. Scott (2014) https://arxiv.org/abs/1405.0506. Provides efficiency overview different sampling approaches sampling Pólya-Gamma distribution. BayesLogit R package Nicholas G. Polson, James G. Scott, Jesse Windle. Provides main C++ class samplers contained used pg package. pgdraw Daniel F. Schmidt Enes Makalic. package construction relies heavily free-floating functions Rcpp data structures. bayesCL Rok Cesnovar Erik Strumbelj. package boast sampler 100x faster offloading computation onto GPU. Though, package actively maintained. Python pypolyagamma package Scott Linderman. Stan lacks implementation Pólya-Gamma distribution since relies joint proposals rather full conditionals.","code":""},{"path":"https://tmsalab.github.io/pg/index.html","id":"author","dir":"","previous_headings":"","what":"Author","title":"Pólya-Gamma Distribution Sampler","text":"James Balamuta leaning heavily work done BayesLogit R package Nicholas G. Polson, James G. Scott, Jesse Windle.","code":""},{"path":"https://tmsalab.github.io/pg/index.html","id":"citing-the-pg-package","dir":"","previous_headings":"","what":"Citing the pg package","title":"Pólya-Gamma Distribution Sampler","text":"ensure future development package, please cite pg package used analysis simulation study. Citation information package may acquired using R:","code":"citation(\"pg\")"},{"path":"https://tmsalab.github.io/pg/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Pólya-Gamma Distribution Sampler","text":"GPL (>= 3)","code":""},{"path":"https://tmsalab.github.io/pg/reference/pg-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pg: Pólya-Gamma Distribution Sampler — pg-package","title":"pg: Pólya-Gamma Distribution Sampler — pg-package","text":"Provides access high performant random distribution sampler Pólya-Gamma Distribution using either 'C++' headers 'Rcpp' 'RcppArmadillo' 'R'.","code":""},{"path":[]},{"path":"https://tmsalab.github.io/pg/reference/pg-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pg: Pólya-Gamma Distribution Sampler — pg-package","text":"Maintainer: James Balamuta balamut2@illinois.edu [copyright holder]","code":""},{"path":"https://tmsalab.github.io/pg/reference/rpg-sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from the Pólya-Gamma distribution PG(h, z) — rpg_scalar","title":"Sample from the Pólya-Gamma distribution PG(h, z) — rpg_scalar","text":"Chooses efficient implemented method sample Pólya-Gamma distribution. Details algorithm selection presented .","code":""},{"path":"https://tmsalab.github.io/pg/reference/rpg-sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from the Pólya-Gamma distribution PG(h, z) — rpg_scalar","text":"","code":"rpg_scalar(h, z)  rpg_vector(n, h, z)  rpg_hybrid(h, z)  rpg_gamma(h, z, trunc = 1000L)  rpg_devroye(h, z)  rpg_sp(h, z)  rpg_normal(h, z)"},{"path":"https://tmsalab.github.io/pg/reference/rpg-sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from the Pólya-Gamma distribution PG(h, z) — rpg_scalar","text":"h integer values corresponding \"shape\" parameter. z numeric values corresponding \"scale\" parameter. n number samples taken PG(h, z). Used vector sampler. trunc Truncation cut-. used gamma sampler.","code":""},{"path":"https://tmsalab.github.io/pg/reference/rpg-sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from the Pólya-Gamma distribution PG(h, z) — rpg_scalar","text":"single numeric value.","code":""},{"path":"https://tmsalab.github.io/pg/reference/rpg-sampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample from the Pólya-Gamma distribution PG(h, z) — rpg_scalar","text":"following sampling cases enabled: h > 170: Normal approximation method h > 13: Saddlepoint approximation method h = 1 h = 2: Devroye method h > 0: Sum Gammas method. h < 0: Result automatically set zero.","code":""},{"path":"https://tmsalab.github.io/pg/reference/rpg-sampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from the Pólya-Gamma distribution PG(h, z) — rpg_scalar","text":"","code":"# Fixed parameter distribution simulation ----  ## Parameters  ---- h = 1; z = .5  ## Sample only one value  ---- single_value = rpg_scalar(h, z) single_value #> [1] 0.0552233  ## Attempt distribution recovery  ---- vector_of_pg_samples = rpg_vector(1e6, h, z)  head(vector_of_pg_samples) #>           [,1] #> [1,] 0.1093875 #> [2,] 0.2132562 #> [3,] 0.1220383 #> [4,] 0.1937104 #> [5,] 0.5420250 #> [6,] 0.2071399 length(vector_of_pg_samples) #> [1] 1000000  ## Obtain the empirical results   ---- empirical_mean = mean(vector_of_pg_samples) empirical_var = var(vector_of_pg_samples)  ## Take the theoretical values ---- theoretical_mean = pg_mean(h, z) theoretical_var = pg_var(h, z)  ## Form a comparison table ----  # empirically sampled vs. theoretical values rbind(c(empirical_mean, theoretical_mean),       c(empirical_var, theoretical_var)) #>            [,1]      [,2] #> [1,] 0.24507631 0.2449187 #> [2,] 0.03959919 0.0396598  # Varying distribution parameters ----  ## Generate varying parameters ---- u_h = 20:100 u_z = 0.5*u_h  ## Sample from varying parameters ---- x = rpg_hybrid(u_h, u_z)"},{"path":"https://tmsalab.github.io/pg/reference/theoretical-pg.html","id":null,"dir":"Reference","previous_headings":"","what":"Theoretical Polya-Gamma Distribution's Mean and Variance — pg_mean","title":"Theoretical Polya-Gamma Distribution's Mean and Variance — pg_mean","text":"Compute theoretical mean variance Polya-Gamma variable.","code":""},{"path":"https://tmsalab.github.io/pg/reference/theoretical-pg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theoretical Polya-Gamma Distribution's Mean and Variance — pg_mean","text":"","code":"pg_mean(h, z)  pg_var(h, z)"},{"path":"https://tmsalab.github.io/pg/reference/theoretical-pg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theoretical Polya-Gamma Distribution's Mean and Variance — pg_mean","text":"h single integer value corresponding \"shape\" parameter. z single numeric value corresponding \"scale\" parameter.","code":""},{"path":"https://tmsalab.github.io/pg/reference/theoretical-pg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theoretical Polya-Gamma Distribution's Mean and Variance — pg_mean","text":"Either theoretical mean theoretical variance Polya-Gamma distribution.","code":""},{"path":"https://tmsalab.github.io/pg/reference/theoretical-pg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theoretical Polya-Gamma Distribution's Mean and Variance — pg_mean","text":"","code":"# Fixed parameter distribution simulation ----  ## Parameters  ---- h = 1; z = .5 ## Attempt distribution recovery  ---- vector_of_pg_samples = rpg_vector(1e6, h, z)  head(vector_of_pg_samples) #>            [,1] #> [1,] 0.38548335 #> [2,] 0.18300187 #> [3,] 0.16468123 #> [4,] 0.16856666 #> [5,] 0.09307519 #> [6,] 0.13502899 length(vector_of_pg_samples) #> [1] 1000000  ## Obtain the empirical results   ---- empirical_mean = mean(vector_of_pg_samples) empirical_var = var(vector_of_pg_samples)  ## Take the theoretical values ---- theoretical_mean = pg_mean(h, z) theoretical_var = pg_var(h, z)  ## Form a comparison table ----  # empirically sampled vs. theoretical values rbind(c(empirical_mean, theoretical_mean),       c(empirical_var, theoretical_var)) #>            [,1]      [,2] #> [1,] 0.24486908 0.2449187 #> [2,] 0.03970062 0.0396598"},{"path":"https://tmsalab.github.io/pg/news/index.html","id":"pg-024","dir":"Changelog","previous_headings":"","what":"pg 0.2.4","title":"pg 0.2.4","text":"Initial CRAN submission.","code":""}]
